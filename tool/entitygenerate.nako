親クラスは「Entity」
クラス名は「Person」。
データは、
「String,name,名前,,,1
String,order,順番,
String,notes,ノート,
」。
# 型, 名前, 説明, 新名前, フィールド権限, toStringフラグ, hasフラグ

比較可能は、いいえ

フィールドは空
メソッドは空
コンストラクタは空
コンストラクタ引数は空
デフォルトコンストラクタは空
等価メソッドは空
ハッシュメソッドは空
インポートとは配列
文字列変換メソッドは空
データを改行で区切って反復
　もし、対象が空ならば、抜ける
　対象を「,」で区切る
　型はそれ￥０
　名前はそれ￥１
　説明はそれ￥２
　新名前はそれ￥３
　フィールド権限はそれ￥４
　toStringフラグは、それ￥５
　hasフラグは、それ￥６
　
　もし、新名前が空ならば、新名前は名前
　もし、フィールド権限が空ならば、フィールド権限は「private」
　
　一般型は、いいえ
　もし、型が「String」｜｜型が「Integer」｜｜型が「Double」｜｜型が「Float」｜｜型が「Long」ならば、
　　一般型は、はい
　
　もし、一般型がはいならば、
　　ゲッターは、「{型}Property」
　違えば、
　　ゲッターは、「ObjectProperty<{型}>」
　
　インポート存在は、いいえ
　インポートを反復
　　もし、一般型がはいならば、
　　　もし、対象が型ならば、
　　　　インポート存在は、はい
　　　　抜ける
　　違えば、
　　　もし、対象が「Object」ならば、
　　　　インポート存在は、はい
　　　　抜ける
　もし、インポート存在がいいえならば、
　　もし、一般型がはいならば、
　　　インポートに型を配列追加
　　違えば、
　　　インポートに「Object」を配列追加
　
　pascal名前は、名前
　pascal名前から1文字左部分。先頭文字は、それ
　pascal名前の1から1文字削除
　pascal名前は、（先頭文字を大文字変換）＆pascal名前
　
　もし、型がクラス名でなければ、
　　プロパティリスナーソースは、空
　違えば、
　　プロパティリスナーソースは、「		this.{新名前}.addListener((obj) -> {波カッコ} if (obj == this) {波カッコ} this.{新名前}.set(null); {波カッコ閉じ} {波カッコ閉じ});{改行}」
　
　メソッドは、メソッド＆「
	/*
	 * {説明}
	 */
	public {ゲッター} {新名前}Property() {波カッコ}
		return this.{新名前};
	{波カッコ閉じ}
」
　もし、hasフラグがはいならば、
　　メソッドは、メソッド＆「
	public boolean has{pascal名前}() {波カッコ}
		return this.{新名前}.getValue() != null;
	{波カッコ閉じ}
」
　
　コンストラクタは、コンストラクタ＆「		this.{新名前}.set({名前});{改行}」
　もし、コンストラクタ引数が空でなければ、
　　コンストラクタ引数は、コンストラクタ引数＆「, {型} {名前}」
　違えば、
　　コンストラクタ引数は、コンストラクタ引数＆「{型} {名前}」
　
　もし、一般型がいいえならば、
　　デフォルトコンストラクタは、デフォルトコンストラクタ＆「		this.{新名前} = new SimpleObjectProperty<{型}>();{改行}{プロパティリスナーソース}」
　　フィールドは、フィールド＆「	private ObjectProperty<{型}> {新名前};{改行}」
　違えば、
　　デフォルトコンストラクタは、デフォルトコンストラクタ＆「		this.{新名前} = new Simple{型}Property();{改行}{プロパティリスナーソース}」
　　フィールドは、フィールド＆「	{フィールド権限} {型}Property {新名前};{改行}」
　
　もし、toStringフラグがはいならば、
　　もし、文字列変換メソッドが空ならば、
　　　文字列変換メソッドは、文字列変換メソッド＆「this.{新名前}.getValue()」
　　違えば、
　　　文字列変換メソッドは、文字列変換メソッド＆「 + this.{新名前}.getValue()」
　
　等価メソッドは、等価メソッド＆「			ret &= this.equalsProperty(this.{新名前}, test.{新名前});{改行}」
　ハッシュメソッドは、ハッシュメソッド＆「		hash = hash * 31 + this.propertyHashCode(this.{新名前});{改行}」

インポートソースは、空
インポートを反復
　インポートソースは、インポートソース＆「import javafx.beans.property.{対象}Property;{改行}import javafx.beans.property.Simple{対象}Property;{改行}」

文字列変換メソッドソースは、空
もし、文字列変換メソッドが空でなければ、
　文字列変換メソッドソースは「	@Override
	public String toString() {波カッコ}
		return {文字列変換メソッド};
	{波カッコ閉じ}{改行}{改行}」

もし、比較可能がはいならば、
　インターフェースは「 implements Comparable<{クラス名}>」
違えば、インターフェースは空

ソースは、
「/*
 * jStorybook: すべての小説家・作者のためのオープンソース・ソフトウェア
 * Copyright (C) 2008 - 2012 Martin Mustun
 *   (このソースの製作者) KMY
 * 
 * このプログラムはフリーソフトです。
 * あなたは、自由に修正し、再配布することが出来ます。
 * あなたの権利は、the Free Software Foundationによって発表されたGPL ver.2以降によって保護されています。
 * 
 * このプログラムは、小説・ストーリーの制作がよりよくなるようにという願いを込めて再配布されています。
 * あなたがこのプログラムを再配布するときは、GPLライセンスに同意しなければいけません。
 *  <http://www.gnu.org/licenses/>.
 */

// このプログラムには、tool\entitygenerate.nakoによって自動生成されたコードが含まれます。
// author: KMY

package jstorybook.model.entity;

{インポートソース}
// {説明} のエンティティを扱うクラス
public class {クラス名} extends {親クラス}{インターフェース} {波カッコ}

{フィールド}
	public {クラス名} () {波カッコ}
{デフォルトコンストラクタ}	{波カッコ閉じ}

	public {クラス名} ({コンストラクタ引数}) {波カッコ}
		this();
{コンストラクタ}	{波カッコ閉じ}
{メソッド}
	// -------------------------------------------------------
	@Override
	public boolean equals(Object obj) {波カッコ}
		boolean ret = super.equals(obj);
		if (ret) {波カッコ}
			{クラス名} test = ({クラス名}) obj;
{等価メソッド}		{波カッコ閉じ}
		return ret;
	{波カッコ閉じ}

	@Override
	public int hashCode() {波カッコ}
		int hash = super.hashCode();
{ハッシュメソッド}		return hash;
	{波カッコ閉じ}

	@Override
	public int compareTo (Entity obj) {波カッコ}
		if (obj instanceof {クラス名}) {波カッコ}
			{クラス名} test = ({クラス名}) obj;
		{波カッコ閉じ}
		else {波カッコ}
			return super.compareTo(obj);
		{波カッコ閉じ}
	{波カッコ閉じ}

{文字列変換メソッドソース}{波カッコ閉じ}
」

ソースを言って、終わる
