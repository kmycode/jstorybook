/*
Storybook: Open Source software for novelists and authors.
Copyright (C) 2008 - 2012 Martin Mustun

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package jstorybook.model.entity;

import javafx.beans.property.IntegerProperty;
import javafx.beans.property.ObjectProperty;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.beans.property.SimpleObjectProperty;
import javafx.beans.property.SimpleStringProperty;
import javafx.beans.property.StringProperty;

/**
 * 人物の分類
 * Part generated by hbm2java
 *
 * @hibernate.class
 *   table="CATEGORY"
 */
public class Category extends Entity implements Comparable<Category> {

	private IntegerProperty order;
	private StringProperty name;
	private ObjectProperty<Category> parent;

	public Category () {
		this.order = new SimpleIntegerProperty();
		this.name = new SimpleStringProperty();
		this.parent = new SimpleObjectProperty<>();
	}

	public Category (Integer sort, String name, Category sup) {
		this();
		this.order.set(sort);
		this.name.set(name);
		this.parent.set(sup);
	}

	/**
	 * @hibernate.property
	 */
	@Deprecated
	public Integer getSort() {
		return this.order.get();
	}

	@Deprecated
	public void setSort(Integer sort) {
		this.order.set(sort);
	}

	public IntegerProperty orderProperty () {
		return this.order;
	}

	/**
	 * @hibernate.property
	 */
	@Deprecated
	public String getName() {
		return this.name.get();
	}

	@Deprecated
	public void setName(String name) {
		this.name.set(name);
	}

	public StringProperty nameProperty () {
		return this.name;
	}

	/**
	 * @hibernate.property
	 */
	@Deprecated
	public Category getSup () {
		if (this.equals(this.parent.get())) {
			return null;
		}
		return this.parent.get();
    }

    public boolean hasSup() {
		return this.parent.get() != null;
    }

	@Deprecated
    public void setSup(Category sup) {
		this.parent.set(sup);
	}

	public ObjectProperty<Category> parentProperty () {
		return this.parent;
	}

	@Override
	public String toString() {
		return this.name.get();
	}

	@Override
	public boolean equals(Object obj) {
		boolean ret = super.equals(obj);
		if (ret) {
			Category test = (Category) obj;
			ret &= Entity.equalsProperty(this.order, test.order);
			ret &= Entity.equalsProperty(this.name, test.name);
			ret &= Entity.equalsProperty(this.parent, test.parent);
		}
		return ret;
	}

	@Override
	public int hashCode() {
		int hash = super.hashCode();
		hash = hash * 31 + this.order.getValue().hashCode();
		hash = hash * 31 + this.name.getValue().hashCode();
		hash = hash * 31 + (this.parent.get() != null ? this.parent.get().hashCode() : 0);
		return hash;
	}

	@Override
	public int compareTo(Category ca) {
		if (hasSup() && (ca.hasSup()) && ( ! (getSup().equals(ca.getSup())))) {
			return getSup().compareTo(ca.getSup());
		}
		return this.order.getValue().compareTo(ca.order.getValue());
	}
}
