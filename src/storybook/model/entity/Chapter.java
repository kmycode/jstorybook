/*
Storybook: Open Source software for novelists and authors.
Copyright (C) 2008 - 2012 Martin Mustun

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package storybook.model.entity;

import java.sql.Timestamp;
import java.util.Calendar;
import java.util.Date;

import storybook.toolkit.I18N;
import storybook.toolkit.TextUtil;

/**
 * Chapter generated by hbm2java
 *
 * @hibernate.class table="CHAPTER"
 */
@SuppressWarnings("serial")
public class Chapter extends AbstractEntity implements Comparable<Chapter> {

	private Part part;
	private Integer chapterno;
	private String title;
	private String description;
	private String notes;
    private Timestamp creationTime;
    private Timestamp objectiveTime;
    private Timestamp doneTime;
    private Integer objectiveChars;

	public Chapter () {
		/*
		 * Calendar today = Calendar.getInstance();
		 * today.set(Calendar.HOUR_OF_DAY, 0);
		 * today.set(Calendar.MINUTE, 0);
		 * today.set(Calendar.SECOND, 0);
		 * today.set(Calendar.MILLISECOND, 0);
		 * this.creationTime = new Timestamp(today.getTime().getTime());
		 */
		this.creationTime = new Timestamp(new Date().getTime());
	}

	public Chapter(Part part, Integer chapterno, String title,
			String description, String notes,
			Timestamp creationTime, Timestamp objectiveTime,
			Timestamp doneTime, Integer objectiveChars) {
		this.part = part;
		this.chapterno = chapterno;
		this.title = title;
		this.description = description;
		this.notes = notes;
		this.creationTime = creationTime;
		this.objectiveTime = objectiveTime;
		this.doneTime = doneTime;
		this.objectiveChars = objectiveChars;
	}

	/**
	 * @hibernate.id
	 *   column="ID"
	 *   generator-class="increment"
	 *   unsaved-value="null"
	 */
	public Long getId() {
		return this.id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	/**
	 * @hibernate.many-to-one
	 *   column="part_id"
	 *   cascade="none"
	 */
	public Part getPart() {
		return part;
	}

	public boolean hasPart() {
		return part != null;
	}

	public void setPart(Part part) {
		this.part = part;
	}

	/**
	 * @hibernate.property
	 */
	public Integer getChapterno() {
		return this.chapterno == null ? -1 : this.chapterno;
	}

	public void setChapterno(Integer chapterno) {
		this.chapterno = chapterno;
	}

	public String getChapternoStr() {
		return getChapterno().toString();
	}

	/**
	 * @hibernate.property
	 */
	public String getTitle() {
		return this.title == null ? "" : this.title;
	}

	public String getTitle(boolean truncate) {
		return title == null ? "" : TextUtil.truncateString(title, 30);
	}

	public void setTitle(String title) {
		this.title = title;
	}

	/**
	 * @hibernate.property
	 */
	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	/**
	 * @hibernate.property
	 */
	public String getNotes() {
		if (notes == null) {
			return "";
		}
		return this.notes;
	}

	public void setNotes(String notes) {
		this.notes = notes;
	}

	/**
	 * @hibernate.property
	 */
    public boolean hasCreationTime() {
        return creationTime != null;
    }

    public void setCreationTime(Timestamp ts) {
    	creationTime = ts;
    }

    public Timestamp getCreationTime() {
    	return creationTime;
    }

	/**
	 * @hibernate.property
	 */
    public boolean hasObjectiveTime() {
        return objectiveTime != null;
    }

    public void setObjectiveTime(Timestamp ts) {
    	objectiveTime = ts;
    }

    public Timestamp getObjectiveTime() {
    	return objectiveTime;
    }

	/**
	 * @hibernate.property
	 */
    public boolean isDone() {
        return hasDoneTime();
    }
    public boolean hasDoneTime() {
        return doneTime != null;
    }

    public void setDoneTime(Timestamp ts) {
    	doneTime = ts;
    }

    public Timestamp getDoneTime() {
    	return doneTime;
    }

	/**
	 * @hibernate.property
	 */
	public Integer getObjectiveChars() {
		return (this.objectiveChars == null) ? 0 : this.objectiveChars;
	}

	public void setObjectiveChars(Integer objectiveChars) {
		this.objectiveChars = objectiveChars;
	}

	@Override
	public String toString() {
		if (chapterno == null) {
			return I18N.getMsg("msg.unassigned.scenes");
		}
		return getChapterno() + ": " + getTitle();
	}

	@Override
	public boolean equals(Object obj) {
		if (!super.equals(obj)) {
			return false;
		}
		Chapter test = (Chapter) obj;
		boolean ret = true;
		ret = ret && equalsObjectNullValue(part, test.getPart());
		ret = ret && equalsIntegerNullValue(chapterno, test.getChapterno());
		ret = ret && equalsStringNullValue(title, test.getTitle());
		ret = ret && equalsStringNullValue(description, test.getDescription());
		ret = ret && equalsStringNullValue(notes, test.getNotes());
		ret = ret && equalsTimestampNullValue(creationTime, test.getCreationTime());
		ret = ret && equalsTimestampNullValue(objectiveTime, test.getObjectiveTime());
		ret = ret && equalsTimestampNullValue(doneTime, test.getDoneTime());
		ret = ret && equalsIntegerNullValue(objectiveChars, test.getObjectiveChars());
		return ret;
	}

	@Override
	public int hashCode() {
		int hash = super.hashCode();
		hash = hash * 31 + part.hashCode();
		hash = hash * 31 + chapterno.hashCode();
		hash = hash * 31 + title.hashCode();
		hash = hash * 31 + description.hashCode();
		hash = hash * 31 + notes.hashCode();
		hash = hash * 31 + (creationTime != null ? creationTime.hashCode() : 0);
		hash = hash * 31 + (objectiveTime != null ? objectiveTime.hashCode() : 0);
		hash = hash * 31 + (doneTime != null ? doneTime.hashCode() : 0);
		hash = hash * 31 + (objectiveChars != null ? objectiveChars.hashCode() : 0);
		return hash;
	}

	@Override
	public int compareTo(Chapter ch) {
		return chapterno.compareTo(ch.chapterno);
	}
}
